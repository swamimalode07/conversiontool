"""

Requirements:
-------------
- Python 3.x
- trimesh library
- numpy library

"""

import sys
import os
import json
import struct
import base64
import zlib
import numpy as np
import trimesh

def load_glb_file(file_path):
    """Load GLB file using trimesh"""
    try:
        print("[Info] Loading GLB file...")
        mesh = trimesh.load(file_path)
        print("[Success] GLB file loaded!")
        print(f"[Info] File type: {type(mesh)}")
        return mesh
    except Exception as e:
        print(f"[Error] Failed to load GLB file: {e}")
        return None

def extract_mesh_data(mesh):
    """Extract mesh data from trimesh object"""
    print("[Info] Extracting mesh data...")
    
    if isinstance(mesh, trimesh.Scene):
     
        mesh_obj = list(mesh.geometry.values())[0]
    else:
        mesh_obj = mesh
    
   
    vertices = mesh_obj.vertices
    faces = mesh_obj.faces
    
    print(f"[Info] Vertices: {len(vertices)}")
    print(f"[Info] Faces: {len(faces)}")
    
    bounds = {
        'min': vertices.min(axis=0).tolist(),
        'max': vertices.max(axis=0).tolist()
    }
    print(f"[Info] Bounds: {bounds}")
    
    return {
        'vertices': vertices,
        'faces': faces,
        'bounds': bounds
    }

def create_clean_usd_content(mesh_data):
    """Create clean USD content without material binding"""
    print("[Info] Creating clean USD structure...")
    
    vertices = mesh_data['vertices']
    faces = mesh_data['faces']
    bounds = mesh_data['bounds']
    
    vertex_str = ",\n        ".join([f"({v[0]:.6f}, {v[1]:.6f}, {v[2]:.6f})" for v in vertices])
    
   
    face_indices = []
    for face in faces:
        face_indices.extend(face)
    face_str = ",\n        ".join([str(idx) for idx in face_indices])
    
   
    usd_content = f'''#usda 1.0
(
    "Generated by GLB to USD Converter"
    upAxis = "Z"
    metersPerUnit = 1.0
)

def Mesh "Model"
{{
    float3[] extent = [({bounds['min'][0]:.6f}, {bounds['min'][1]:.6f}, {bounds['min'][2]:.6f}), ({bounds['max'][0]:.6f}, {bounds['max'][1]:.6f}, {bounds['max'][2]:.6f})]
    int[] faceVertexCounts = [{", ".join(["3"] * len(faces))}]
    int[] faceVertexIndices = [
        {face_str}
    ]
    point3f[] points = [
        {vertex_str}
    ]
    uniform token subdivisionScheme = "none"
}}
'''
    
    return usd_content

def save_usd_file(content, output_path):
    """Save USD content to file"""
    try:
        print("[Info] Creating USD file...")
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        file_size = os.path.getsize(output_path)
        print(f"[Success] USD file created: {output_path}")
        print(f"[Info] File size: {file_size} bytes")
        print("[Info] This file should work with Blender's USD import")
        print("[Info] Import in Blender: File > Import > Universal Scene Description (.usd)")
        return True
    except Exception as e:
        print(f"[Error] Failed to save USD file: {e}")
        return False

def main():
    """Main function"""
    if len(sys.argv) != 3:
        print("Usage: python glb_to_usd_clean.py input_file.glb output_file.usd")
        sys.exit(1)
    
    input_file = sys.argv[1]
    output_file = sys.argv[2]
    
    print("[Info] Creating clean Blender-compatible USD file...")
    print(f"[Info] Input: {input_file}")
    print(f"[Info] Output: {output_file}")
    
    
    if not os.path.exists(input_file):
        print(f"[Error] Input file not found: {input_file}")
        sys.exit(1)
    
  
    mesh = load_glb_file(input_file)
    if mesh is None:
        sys.exit(1)
    
    mesh_data = extract_mesh_data(mesh)
    
    usd_content = create_clean_usd_content(mesh_data)
    
 
    if save_usd_file(usd_content, output_file):
        print("[Success] Conversion completed successfully!")
    else:
        print("[Error] Conversion failed!")
        sys.exit(1)

if __name__ == "__main__":
    main() 